namespace DesignPatterns_Csharp;

// ------ Описание работы ------ //

// Идея - файловая система. Дешево и сердито по заданию пока без выкрутасов, ибо только-только изучаю паттерн. «»
// Интерфейс «IFile_system_item». Содержит переменные и методы.
// «Название» - позволяет указать и узнать название.
// «Узнать_размер()» - позволяет узнать размер. Пока только по количеству символов в названии (✿◠‿◠)
// «Путь» - то, что должно быть, но мне лень реализовывать (пока что). Будет отображать папки через слэши /папка/папка/файл.txt
// «Информация()» - узнать информацию о файле или папке. Пока только придумал Дату создания.
// «Отобразить(int вложенность = 0)» - выводит в консоль всю иерархию, где у корневого каталога отступов нет, а у остальных по накатанной отступы в виде «-»
// «Количество_файлов()» - отображает количество именно файлов от папки.
// Имеются классы «Папка» и «Файл». Создают, соответственно, аналог папки или файла. Только у папки есть особенные методы по добавлению, удалению и переименованию.
// У «Папка» реализованы методы «Удалить» и «Переименовать» с перегрузкой, от чего можно вписывать и файл, и просто название.
// Пока так. Если что - буду дополнять, штука обширная и комплексная (◕‿◕✿)

// ------------------------------ //


class Program
{
    static void Main(string[] args)
    {
        Папка корнейвой_каталог = new Папка("Папка_круглый_стол");
        Папка каталог_просто = new Папка("Союзники");

        каталог_просто.Добавить(new Файл("Грызуны.png"));
        корнейвой_каталог.Добавить(каталог_просто);
        корнейвой_каталог.Добавить(new Файл("Лол.txt"));
        
        
        корнейвой_каталог.Отобразить();
        
        корнейвой_каталог.Переименовать("Лол.txt", "Лоооол.txt");
        
        корнейвой_каталог.Отобразить();
        
        корнейвой_каталог.Переименовать(корнейвой_каталог, "Всись");
        
        корнейвой_каталог.Отобразить();
        
        корнейвой_каталог.Информация();
        корнейвой_каталог.Узнать_размер();
        
        Console.WriteLine($"Количество файлов в папке {корнейвой_каталог.Название} {корнейвой_каталог.Количество_файлов()}");
        
        корнейвой_каталог.Удалить("Лоооол.txt");
        корнейвой_каталог.Отобразить();
  
        
    }
    
    
}


public class Файл : IFile_system_item
{
    public DateTime Дата_создания;
    public float Размер;

    public string Название { get; set;}
    public string Путь { get; }

    public Файл(string название)
    {
        Название = название;
        Дата_создания = DateTime.Now;
    }
    public void Узнать_размер()
    {
        foreach (char символ in Название)
        {
            Размер++;
        }

        Console.WriteLine($"Размер файла: {Размер} байт.");
    }

    public int Количество_файлов()
    {
        return 1;
    }
    
    
    public void Информация()
    {
        Console.WriteLine($"Дата создания: {Дата_создания}");
    }

    public void Отобразить(int вложенность = 0)
    {
        Console.WriteLine($"{new string('-', вложенность)} Название файла: {Название}");
    }
}

public class Папка : IFile_system_item
{
    List<IFile_system_item> _файлы_папки = new List<IFile_system_item>();
    
    public DateTime Дата_создания;
    public float Размер;
    
    public string Название { get; set; }

    public string Путь { get; }

    public Папка(string название)
    {
        Название = название;
        Дата_создания = DateTime.Now;
    }
    
    public void Узнать_размер()
    {
        foreach (char символ in Название)
        {
            Размер++;
        }

        Console.WriteLine($"Размер: {Размер} байт.");
    }

    public int Количество_файлов()
    {
        int счетчик_элементов = 0;
        foreach (var проверка_файл in _файлы_папки)
        {
            счетчик_элементов += проверка_файл.Количество_файлов();
            // Console.WriteLine(проверка_файл);
        }
        // Console.WriteLine($"Количество файлов в папке {this.Название}: {счетчик_элементов}");
        

        return счетчик_элементов;
    }

    
    public void Информация()
    {
        Console.WriteLine($"Дата создания: {Дата_создания}");

        
    }

    public void Добавить(IFile_system_item файл)
    {
        _файлы_папки.Add(файл);
    }
    
    public void Удалить(IFile_system_item файл)
    {
        _файлы_папки.Remove(файл);
    }
    
    public void Удалить(string файл)
    {
        // Без этого доп. листа и цикла выдаст ошибку: Unhandled exception. System.InvalidOperationException: Collection was modified; enumeration operation may not execute. at System.Collections.Generic.List`1.Enumerator.MoveNext()
        List<IFile_system_item> файлы_для_удаления = new List<IFile_system_item>();
        
        foreach (var проверка_файл in _файлы_папки)
        {
            if (проверка_файл is Файл && проверка_файл.Название.Contains(файл))
            {
                файлы_для_удаления.Add(проверка_файл);
            }
        }
        
        foreach (var проверка_файл in файлы_для_удаления)
        {
            _файлы_папки.Remove(проверка_файл);
        }
        
    }
    
    public void Переименовать(string название_старое, string название_новое)
    {

        foreach (var проверка_файл in _файлы_папки)
        {
            if (проверка_файл.Название.Contains(название_старое))
            {
                проверка_файл.Название = название_новое;
            }
        }
    }
    
    public void Переименовать(IFile_system_item файл, string название_новое)
    {

        foreach (var проверка_файл in _файлы_папки)
        {
            if (файл is Файл)
            {
                файл.Название = название_новое;
            }
            else if (файл is Папка)
            {
                файл.Название = название_новое;
            }
        }
    }

    public void Отобразить(int вложенность = 0)
    {
        Console.WriteLine($"{new string('-', вложенность)} Название папки: {Название}");
        foreach (var элемент in _файлы_папки)
        {
            элемент.Отобразить(вложенность + 3);
        }
    }
}