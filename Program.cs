using System.Diagnostics;
using Serilog;

namespace DesignPatterns_Csharp;

// ------ Паттерн Proxy ------ //

// Пока что видится как самый гениальный и полезный паттерн, силу которого можно раскрыть в реальных практических задачах.
// Тема приложения: Логирующий прокси для класса с разными действиями с файлами.
// В Общем интерфейсе «IAction_list» содержатся методы для работы с файлами:
// «Создать_файл()»; «Удалить_файл()»; «Редактировать_файл()»; «Копировать_вставить_файл()». Каждый метод требует свои аргументы для работы (в основном - название файла).
// Имеется класс «Действия» - реальный объект, и «Прокси_Действия» - логирующий прокси, отслеживающий разные операции в файл логов и список действий.
// Работа с файлами вес имеет, так что логировщик «Прокси_Действия» оповещает в консоль и документирует разные операции в log.txt, попутно записывая их в историю списка «Текущее_действие».
// Настройки логирования также задаются в методе прокси «Инициализация_настроек_логера()».

// ------------------------------ //

class Program
{
    static void Main(string[] args)
    {
        Прокси_Действия прокси_действия = new Прокси_Действия();
        прокси_действия.Инициализация_настроек_логера();
        // Task task = Task.Factory.StartNew(() => прокси_действия.Создать_файл(null, "Тестовый_файл.txt"));
        //
        // Task task2 = Task.Factory.StartNew(() => прокси_действия.Удалить_файл("Тестовый_файл.txt"));
        //
        // Task.WaitAll(task, task2);
        
        // Task.Run((() => прокси_действия.Удалить_файл("Тестовый_файл.txt")));
        
        прокси_действия.Создать_файл(null, "Тестовый_файл.txt");
        
        прокси_действия.Удалить_файл("Тестовый_файл.txt");
        
        прокси_действия.Создать_файл(null, "Тестовый_файл.txt");
        
        прокси_действия.Редактировать_файл("Тестовый_файл.txt", "Тестовый_файл_редактированный.txt");
        
        прокси_действия.Копировать_вставить_файл("Тестовый_файл_редактированный.txt", "logs/Тестовый_файл_редактированный.txt");

    }
}

class Действия : IAction_list
{
    public List<string> Текущее_действие { get; set; }
    public bool Создать_файл(string? путь_файла, string название_файла)
    {
        if (!string.IsNullOrWhiteSpace(путь_файла))
        {
            путь_файла = путь_файла.TrimEnd('/', ' ');
            string готовый_путь = Path.Combine(путь_файла, название_файла);
            using (File.Create($"{готовый_путь}"))
            {
                
            }
            return true;
        }
        else if (string.IsNullOrWhiteSpace(путь_файла))
        {
            using (File.Create($"{название_файла}"))
            {
                
            }
            return true;
        }
        else
        {
            return false;
        }
        
    }

    public bool Удалить_файл(string название_файла)
    {
        if (File.Exists(название_файла))
        {
            File.Delete(название_файла);
            return true;
        }
        else
        {
            Console.WriteLine("Такого файла нет!");
            return false;
        }
        
    }

    public bool Редактировать_файл(string название_файла, string новое_название_файла)
    {
        if (File.Exists(название_файла))
        {
            File.Move(название_файла, новое_название_файла);
            return true;
        }
        else
        {
            Console.WriteLine("Такого файла нет!");
            return false;
        }
    }

    public bool Копировать_вставить_файл(string название_файла, string путь_файла)
    {
        if (File.Exists(название_файла))
        {
            File.Copy(название_файла,путь_файла);
            return true;
        }
        else
        {
            Console.WriteLine("Такого файла нет!");
            return false;
        }
        
    }
}

class Прокси_Действия : IAction_list
{
    private Действия _действия_класс = new Действия();
    public List<string> Текущее_действие;

    
    public void Инициализация_настроек_логера()
    {
        
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console()
            .WriteTo.File("logs/log.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();
        
        Log.Information("Модуль Прокси запущен. {Log.Logger} работает. Информация идет в файл log.txt", Log.Logger);
        Текущее_действие = new List<string>();
        Log.Information("Хранилище действий List<string>(){Текущее_действие} подготовлено.", Текущее_действие);

    }
    
    public bool Создать_файл(string? путь_файла, string название_файла)
    {

        Log.Information($"Выбрана операция Создать_файл() c аргументами: {(string.IsNullOrWhiteSpace(путь_файла) ? "" : путь_файла + ",")} {название_файла}");
        
        if (_действия_класс.Создать_файл(путь_файла, название_файла))
        {
            Log.Information("Операция Создать_файл() завершена.");
            Текущее_действие.Add($"Операция: Создать_файл(), Дата: {DateTime.Now}, Статус: Успешно");
        }
        else
        {
            Log.Information("Операция Создать_файл() ничего не сделала!");
            Текущее_действие.Add($"Операция: Создать_файл(), Дата: {DateTime.Now}, Статус: Безуспешно");
        }

        Log.Information("Последние действия:\n{@Текущее_действие}", Текущее_действие);
        return true;
        
    }

    public bool Удалить_файл(string название_файла)
    {
        Log.Information($"Выбрана операция Удалить_файл() c аргументами: {название_файла}");


        if (_действия_класс.Удалить_файл(название_файла))
        {
            Log.Information("Операция Удалить_файл() завершена.");
            Текущее_действие.Add($"Операция: Удалить_файл(), Дата: {DateTime.Now}, Статус: Успешно");
        }
        else
        {
            Log.Information("Операция Удалить_файл() ничего не сделала!");
            Текущее_действие.Add($"Операция: Удалить_файл(), Дата: {DateTime.Now}, Статус: Безуспешно");
        }
        
        Log.Information("Последние действия:\n{@Текущее_действие}", Текущее_действие);
        return true;

    }

    public bool Редактировать_файл(string название_файла, string новое_название_файла)
    {
        
        Log.Information($"Выбрана операция Редактировать_файл() c аргументами: {название_файла}, {новое_название_файла}");


        if (_действия_класс.Редактировать_файл(название_файла, новое_название_файла))
        {
            Log.Information("Операция Редактировать_файл() завершена.");
            Текущее_действие.Add($"Операция: Редактировать_файл(), Дата: {DateTime.Now}, Статус: Успешно");
        }
        else
        {
            Log.Information("Операция Редактировать_файл() ничего не сделала!");
            Текущее_действие.Add($"Операция: Редактировать_файл(), Дата: {DateTime.Now}, Статус: Безуспешно");
        }
        
        Log.Information("Последние действия:\n{@Текущее_действие}", Текущее_действие);
        return true;

    }

    public bool Копировать_вставить_файл(string название_файла, string путь_файла)
    {
        Log.Information($"Выбрана операция Копировать_вставить_файл() c аргументами: {название_файла}, {путь_файла}");


        if (_действия_класс.Копировать_вставить_файл(название_файла, путь_файла))
        {
            Log.Information("Операция Копировать_вставить_файл() завершена.");
            Текущее_действие.Add($"Операция: Копировать_вставить_файл(), Дата: {DateTime.Now}, Статус: Успешно");
        }
        else
        {
            Log.Information("Операция Копировать_вставить_файл() ничего не сделала!");
            Текущее_действие.Add($"Операция: Копировать_вставить_файл(), Дата: {DateTime.Now}, Статус: Безуспешно");
        }
        
        Log.Information("Последние действия:\n{@Текущее_действие}", Текущее_действие);
        return true;

    }
}
