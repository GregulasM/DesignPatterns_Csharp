namespace DesignPatterns_Csharp;


// ------ Паттерн Декоратор ------ //

// Пока что среди всех паттернов вынес меня больше всего, пришлось два раза сносить все и делать снова, меняя подход и концепцию.
// Имеется интерфейс «ICoffee» с базовыми характеристиками напитка: Количество, описание, состав и стоимость.
// Имеется конкретная реализация компонента «Эспрессо», как самый базовый кофе, с которого все начинается и который задает основной функционал.
// В декораторе «КофеДекоратор» связываемся с интерфейсом, а значит и с базовым конкретным компонентом «Эспрессо», попутно вызывая его методы.
// Конкретные декораторы сделаны как компоненты для кофе. Тупа крафтим напиток из разных элементов.
// У каждого (почти) компонента есть свое описание, добавочная стоимость, плюсик к составу и количеству.
// В Main инициализируем переменную «кофе» интерфейса «ICoffee» и закидываем в нее разные декораторы, базовый, крафтовые

// ------------------------------ //

class Program
{
    static void Main(string[] args)
    {

        ICoffee кофе = new ЭспрессоКофе();
        Console.WriteLine($"Описание: {кофе.Описание}\nЦена: {кофе.Стоимость()}\nСостав: {кофе.Состав}\nКоличество: {кофе.Количество}\n");
        
        кофе = new Вода(кофе);
        Console.WriteLine($"Описание: {кофе.Описание}\nЦена: {кофе.Стоимость()}\nСостав: {кофе.Состав}\nКоличество: {кофе.Количество}\n");
        
        кофе = new Молоко(кофе);
        Console.WriteLine($"Описание: {кофе.Описание}\nЦена: {кофе.Стоимость()}\nСостав: {кофе.Состав}\nКоличество: {кофе.Количество}\n");
        
        кофе = new МедТаежный(кофе);
        Console.WriteLine($"Описание: {кофе.Описание}\nЦена: {кофе.Стоимость()}\nСостав: {кофе.Состав}\nКоличество: {кофе.Количество}\n");
        
        Console.WriteLine();
        
    }
    
}

public class ЭспрессоКофе : ICoffee
{
    
    public float Количество
    {
        get
        {
            return 100f;
        }
    }

    public string Описание
    {
        get
        {
            return "Эспрессо. Классический кофе в классических пропорциях.\n";
        }

    }

    public string Состав
    {
        get
        {
            return "Кофе арабика";
        }
    }

    public decimal Стоимость()
    {
        return 80;
    }
}

public abstract class КофеДекоратор : ICoffee
{
    protected ICoffee _кофе;

    public КофеДекоратор(ICoffee кофе)
    {
        _кофе = кофе;
    }
    
    
    public virtual string Описание
    {
        get
        {
            return _кофе.Описание;
        }
    }

    public virtual float Количество
    {
        get
        {
            return _кофе.Количество;
        }

    }

    

    public virtual string Состав {
        get
        {
            return _кофе.Состав;
        }
    }

    public virtual decimal Стоимость()
    {
        return 80;
    }
    
    
}

public class Вода : КофеДекоратор
{
    public Вода(ICoffee кофе) : base(кофе)
    {
    }

    public override float Количество
    {
        get
        {
            return _кофе.Количество;
        }
    }
    
    public override string Описание
    {
        get
        {
            return _кофе.Описание + "Вода. Свежий кофе с добавление горячей воды - отличное начало продуктивного дня, если вы готовы к небольшой горечи\n";
        }

    }

    public override string Состав
    {
        get
        {
            return _кофе.Состав + ", вода";
        }
    }

    public override decimal Стоимость()
    {
        return _кофе.Стоимость();
    }
}

public class Молоко : КофеДекоратор
{
    public Молоко(ICoffee кофе) : base(кофе)
    {
    }

    public override float Количество
    {
        get
        {
            return _кофе.Количество;
        }
    }
    
    public override string Описание
    {
        get
        {
            return _кофе.Описание + "Молоко. Свежее горячее молоко и кофе - мягкий вкус и заряд бодрости на утро!\n";
        }

    }

    public override string Состав
    {
        get
        {
            return _кофе.Состав + ", молоко 2.5%";
        }
    }

    public override decimal Стоимость()
    {
        return _кофе.Стоимость() + 20;
    }
}

public class МедТаежный : КофеДекоратор
{
    public МедТаежный(ICoffee кофе) : base(кофе)
    {
    }

    public override float Количество
    {
        get
        {
            return _кофе.Количество + 40f;
        }
    }
    
    public override string Описание
    {
        get
        {
            return _кофе.Описание + "Мед Таежный. Раскройте вкус классического кофе с отборным таежным медом Сибири, мягкими сливками и чутка большим количеством самого напитка!\n";
        }

    }

    public override string Состав
    {
        get
        {
            return _кофе.Состав + ", вода, сливки 10%, мед таежный";
        }
    }

    public override decimal Стоимость()
    {
        return _кофе.Стоимость() + 40;
    }
}
